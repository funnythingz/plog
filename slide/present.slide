GoでplogというWebサービスを開発してリリースしてみた
26 Feb 2015
Tags: go golang

Hiroki Oiwa
web developer at nanapi

@funnythingz
https://github.com/funnythingz

* Profile

.image https://avatars0.githubusercontent.com/u/255213?v=3&amp;s=240

エンジニア at nanapi

- GitHub
- Ruby on Rails
- TypeScript
- Go

* Agenda

- なぜGoなのか
- つくったサービスの紹介
- こんなGoパッケージを使ったよ！
- サーバー構成とか
- 所感

* なぜGoなのか

* なぜGoなのか

- 流行ってる！モテる気がする！
- ゆるく書けるけど堅いとこは型い
- Goを実践導入しているところはまだ少ないので実践導入してみたらどうなるか試したかった

.image http://nathany.com/assets/images/gopher-swing.jpg _ 900

* つくったサービスの紹介

* ゆるふわ匿名ダイアリーをつくったよ

.iframe http://plog.link/ 600 1000

* plogについて

.image http://plog.link/assets/images/plog.png

- 匿名ダイアリー
- ログイン不要
- だれでも投稿できる
- マークダウンつかえる
- ゆるふわ
- ソーシャル疲れからの解放

* こんなGoパッケージを使ったよ！

* ディレクトリ構造

  .
  ├── Gomfile
  ├── app.go
  ├── application-helper.go
  ├── assets
  │   ├── fonts
  │   ├── images
  │   ├── javascripts
  │   └── stylesheets
  ├── colors.go
  ├── database.yml
  ├── db
  │   └── dbmap.go
  ├── entry-controller.go
  ├── entry-viewmodel.go
  ├── entry_test.go
  ├── exception-controller.go
  ├── helper
  │   └── helper.go
  ├── meta-og.go
  ├── migrate
  │   ├── migration.go
  │   └── migration_t.go
  ├── models
  │   ├── comment.go
  │   └── entry.go
  ├── new-viewmodel.go
  ├── paginate.go
  ├── top-controller.go
  ├── top-viewmodel.go
  ├── view-helper.go
  └── views
      ├── 404.ace
      ├── layouts
      ├── new.ace
      ├── top.ace
      └── view.ace

* Go Manager - github.com/mattn/gom

  ./Gomfile

.code ../Gomfile

  % gom -development install
  % gom exec gin

* Minimalistic web framework - github.com/zenazn/goji

  ./app.go

.code ../app.go 11,36

* Asset Management - github.com/shaoshing/train

  └── assets
      ├── javascripts
      │   └── main.js
      └── stylesheets
          └── main.scss

.code ../app.go 19

  % train
  -> clean bundled assets
  -> copy assets from assets
  -> bundle and compile assets
  -> compress assets
  [public/assets/javascripts/bootstrap.js public/assets/javascripts/main.js]
  [public/assets/stylesheets/main.css]
  -> Fingerprinting Assets

* ORMapper - github.com/jinzhu/gorm

config

.code ../database.toml.sample

* ORMapper - github.com/jinzhu/gorm

open

.code ../db/dbmap.go 13,31

* ORMapper - github.com/jinzhu/gorm

migration

.code ../migrate/migration.go 9,16

* ORMapper - github.com/jinzhu/gorm

model

.code ../models/entry.go 9,25

* Converter

*Markdown* to HTML - github.com/russross/blackfriday

*Sanitizer* - github.com/microcosm-cc/bluemonday

.code ../entry-viewmodel.go 25,27

* Truncate - github.com/funnythingz/sunnyday

.code ../view-helper.go 9,18

.code ../views/top.ace 23,28

* template - github.com/yosssi/ace

layout

.code ../views/layouts/layout.ace 37,53

* template - github.com/yosssi/ace

view

.code ../views/top.ace

* template - github.com/yosssi/ace

load

.code ../entry-controller.go 21,37

* validation

.code ../entry-controller.go 64,76

* test - testing

.code ../entry_test.go 46,63

  % go test -v

* Live reload utility - github.com/codegangsta/gin

  % gom exec gin
  [gin] listening on port 3000

* サーバー構成とか

* サーバー構成とか

さくらVPS 512 SSD CentOS6

Nginx + FastCGI + Supervisor

FastCGI化したGoアプリをSupervisorでデーモン化して動かしている

*デプロイとか*

buildしたあとにFastCGI化したplogをリロードする

  % git pull
  % gom install
  % gom build
  % train
  % sudo /etc/init.d/supervisor restart

* 所感

* 開発してみてよかったこと

- マッタリ書けるので純粋にプログラミングが楽しかった
- パッケージがGitHubで公開されているので簡単に導入できる
- build速いのとginのおかげでスクリプト言語のような感覚で開発できた
- なによりパフォーマンスが高いと思う
- vimとGoの相性が抜群

* つらかったところ、ハマったところ

- まだまだGoのパッケージが充実しているとは言えないので自分でいろいろつくらなきゃいけない
- 良くも悪くもシンプル
- Railsのようなフルスタックではないので自分でベースもつくらなきゃいけない
- ノウハウや情報がぜんぜん少ないのでハマるとつらい
- Daemon化のベストプラクティスがわからなくてハマった

とはいえGoたのしいよ！

* さいごに

* 純粋にプログラミングが楽しめるのがGoの良いところだと思うよ！

.image ./space_gopher.jpg _ 900

* ソース公開しちゃってます

*https://github.com/funnythingz/plog*

starとかプルリクとかお待ちしております…！
